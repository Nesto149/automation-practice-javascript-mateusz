{
  "stats": {
    "suites": 10,
    "tests": 15,
    "passes": 0,
    "pending": 0,
    "failures": 15,
    "start": "2023-10-30T07:03:07.689Z",
    "end": "2023-10-30T07:04:16.139Z",
    "duration": 68450,
    "testsRegistered": 27,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 12,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "73907f1f-aa36-422f-8a7c-50fe36dba7a8",
      "title": "",
      "fullFile": "cypress\\tests\\app.cy.js",
      "file": "cypress\\tests\\app.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e9732e4f-8bac-4977-9c53-27d4975b5539",
          "title": "TodoMVC - React",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "797a2cdb-83bb-48d9-93c7-6342d9f951dd",
              "title": "Add todo test presentation",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Should add 2 todos",
                  "fullTitle": "TodoMVC - React Add todo test presentation Should add 2 todos",
                  "timedOut": null,
                  "duration": 4366,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type('learn testing{enter}').type('be cool{enter}');\ncy.get('.todo-list li').should('have.length', 2);",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (webpack://automation-practice/./cypress/tests/app.cy.js:40:6)",
                    "diff": null
                  },
                  "uuid": "a5dda8b2-5ebc-4479-a89b-90f50c505016",
                  "parentUUID": "797a2cdb-83bb-48d9-93c7-6342d9f951dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "a5dda8b2-5ebc-4479-a89b-90f50c505016"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4366,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "50d01da5-ab30-48f4-803e-8785b970c50f",
              "title": "New Todo",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to add todo items",
                  "fullTitle": "TodoMVC - React New Todo should allow me to add todo items",
                  "timedOut": null,
                  "duration": 4342,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// create 1st todo\ncy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}');\n// make sure the 1st label contains the 1st todo text\ncy.get('.todo-list li').eq(0).find('label').should('contain', TODO_ITEM_ONE);\n// create 2nd todo\ncy.get('.new-todo').type(TODO_ITEM_TWO).type('{enter}');\n// make sure the 2nd label contains the 2nd todo text\ncy.get('.todo-list li').eq(1).find('label').should('contain', TODO_ITEM_TWO);",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (webpack://automation-practice/./cypress/tests/app.cy.js:56:6)",
                    "diff": null
                  },
                  "uuid": "c000bf0a-4d5b-4058-af98-b7a718b1f7ce",
                  "parentUUID": "50d01da5-ab30-48f4-803e-8785b970c50f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "adds items",
                  "fullTitle": "TodoMVC - React New Todo adds items",
                  "timedOut": null,
                  "duration": 4230,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// create several todos then check the number of items in the list\ncy.get('.new-todo').type('todo A{enter}').type('todo B{enter}') // we can continue working with same element\n.type('todo C{enter}') // and keep adding new items\n.type('todo D{enter}');\ncy.get('.todo-list li').should('have.length', 4);",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (webpack://automation-practice/./cypress/tests/app.cy.js:76:6)",
                    "diff": null
                  },
                  "uuid": "000ed168-2259-440f-8696-7512ccfc7b1f",
                  "parentUUID": "50d01da5-ab30-48f4-803e-8785b970c50f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should clear text input field when an item is added",
                  "fullTitle": "TodoMVC - React New Todo should clear text input field when an item is added",
                  "timedOut": null,
                  "duration": 4237,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.new-todo').type(TODO_ITEM_ONE).type('{enter}');\ncy.get('.new-todo').should('have.text', '');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (webpack://automation-practice/./cypress/tests/app.cy.js:86:6)",
                    "diff": null
                  },
                  "uuid": "47bfbd8e-2d48-4f72-bf99-16797002931c",
                  "parentUUID": "50d01da5-ab30-48f4-803e-8785b970c50f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should append new items to the bottom of the list",
                  "fullTitle": "TodoMVC - React New Todo should append new items to the bottom of the list",
                  "timedOut": null,
                  "duration": 4312,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// this is an example of a custom command\n// defined in cypress/support/commands.js\ncy.createDefaultTodos().as('todos');\n// even though the text content is split across\n// multiple <span> and <strong> elements\n// `cy.contains` can verify this correctly\ncy.get('.todo-count').contains('3 items left');\ncy.get('@todos').eq(0).find('label').should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).find('label').should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).find('label').should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (webpack://automation-practice/./cypress/support/commands.js:39:4)",
                    "diff": null
                  },
                  "uuid": "59f30506-7af8-4c88-99e3-2546d791da1b",
                  "parentUUID": "50d01da5-ab30-48f4-803e-8785b970c50f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should show #main and #footer when items added",
                  "fullTitle": "TodoMVC - React New Todo should show #main and #footer when items added",
                  "timedOut": null,
                  "duration": 4291,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.main').should('be.visible');\ncy.get('.footer').should('be.visible');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (webpack://automation-practice/./cypress/support/commands.js:67:4)",
                    "diff": null
                  },
                  "uuid": "6cc177b8-45f5-456f-9cfc-b145d7619f03",
                  "parentUUID": "50d01da5-ab30-48f4-803e-8785b970c50f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c000bf0a-4d5b-4058-af98-b7a718b1f7ce",
                "000ed168-2259-440f-8696-7512ccfc7b1f",
                "47bfbd8e-2d48-4f72-bf99-16797002931c",
                "59f30506-7af8-4c88-99e3-2546d791da1b",
                "6cc177b8-45f5-456f-9cfc-b145d7619f03"
              ],
              "pending": [],
              "skipped": [],
              "duration": 21412,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a5a8652-bf5f-4fd0-99c4-cc02e7f5034e",
              "title": "Mark all as completed",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark all items as completed",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to mark all items as completed",
                  "timedOut": null,
                  "duration": 4176,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// complete all todos\n// we use 'check' instead of 'click'\n// because that indicates our intention much clearer\ncy.get('.toggle-all').check();\n// get each todo li and ensure its class is 'completed'\ncy.get('@todos').eq(0).should('have.class', 'completed');\ncy.get('@todos').eq(1).should('have.class', 'completed');\ncy.get('@todos').eq(2).should('have.class', 'completed');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Mark all as completed`",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Mark all as completed`\n    at Context.eval (webpack://automation-practice/./cypress/support/commands.js:39:4)",
                    "diff": null
                  },
                  "uuid": "6d641e86-48aa-46b3-969c-f37a445f1668",
                  "parentUUID": "0a5a8652-bf5f-4fd0-99c4-cc02e7f5034e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to clear the complete state of all items",
                  "fullTitle": "TodoMVC - React Mark all as completed should allow me to clear the complete state of all items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// check and then immediately uncheck\ncy.get('.toggle-all').check().uncheck();\ncy.get('@todos').eq(0).should('not.have.class', 'completed');\ncy.get('@todos').eq(1).should('not.have.class', 'completed');\ncy.get('@todos').eq(2).should('not.have.class', 'completed');",
                  "err": {},
                  "uuid": "822d13a3-722c-4453-a7e8-e2018db61591",
                  "parentUUID": "0a5a8652-bf5f-4fd0-99c4-cc02e7f5034e",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "complete all checkbox should update state when items are completed / cleared",
                  "fullTitle": "TodoMVC - React Mark all as completed complete all checkbox should update state when items are completed / cleared",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// alias the .toggle-all for reuse later\ncy.get('.toggle-all').as('toggleAll').check()\n// this assertion is silly here IMO but\n// it is what TodoMVC does\n.should('be.checked');\n// alias the first todo and then click it\ncy.get('.todo-list li').eq(0).as('firstTodo').find('.toggle').uncheck();\n// reference the .toggle-all element again\n// and make sure its not checked\ncy.get('@toggleAll').should('not.be.checked');\n// reference the first todo again and now toggle it\ncy.get('@firstTodo').find('.toggle').check();\n// assert the toggle all is checked again\ncy.get('@toggleAll').should('be.checked');",
                  "err": {},
                  "uuid": "6e5aed4c-fb9e-4371-99c9-98d39854bb10",
                  "parentUUID": "0a5a8652-bf5f-4fd0-99c4-cc02e7f5034e",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "6d641e86-48aa-46b3-969c-f37a445f1668"
              ],
              "pending": [],
              "skipped": [
                "822d13a3-722c-4453-a7e8-e2018db61591",
                "6e5aed4c-fb9e-4371-99c9-98d39854bb10"
              ],
              "duration": 4176,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "949c37fd-380d-460a-9539-18935cb19b42",
              "title": "Item",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to mark items as complete",
                  "timedOut": null,
                  "duration": 4357,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// we are aliasing the return value of\n// our custom command 'createTodo'\n//\n// the return value is the <li> in the <ul.todos-list>\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('have.class', 'completed');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (webpack://automation-practice/./cypress/support/commands.js:67:4)",
                    "diff": null
                  },
                  "uuid": "ab333cb1-a946-4027-9f88-79b7abf1e991",
                  "parentUUID": "949c37fd-380d-460a-9539-18935cb19b42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to un-mark items as complete",
                  "fullTitle": "TodoMVC - React Item should allow me to un-mark items as complete",
                  "timedOut": null,
                  "duration": 4342,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check();\ncy.get('@firstTodo').should('have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');\ncy.get('@firstTodo').find('.toggle').uncheck();\ncy.get('@firstTodo').should('not.have.class', 'completed');\ncy.get('@secondTodo').should('not.have.class', 'completed');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (webpack://automation-practice/./cypress/support/commands.js:67:4)",
                    "diff": null
                  },
                  "uuid": "cf4bbb3d-72f8-4c84-bd42-1c6d23554db6",
                  "parentUUID": "949c37fd-380d-460a-9539-18935cb19b42",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow me to edit an item",
                  "fullTitle": "TodoMVC - React Item should allow me to edit an item",
                  "timedOut": null,
                  "duration": 4348,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createDefaultTodos().as('todos');\ncy.get('@todos').eq(1).as('secondTodo')\n// TODO: fix this, dblclick should\n// have been issued to label\n.find('label').dblclick();\n// clear out the inputs current value\n// and type a new value\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages').type('{enter}');\n// explicitly assert about the text value\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (webpack://automation-practice/./cypress/support/commands.js:39:4)",
                    "diff": null
                  },
                  "uuid": "bc123c4c-e9ea-40df-889f-db7d0a860f56",
                  "parentUUID": "949c37fd-380d-460a-9539-18935cb19b42",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "ab333cb1-a946-4027-9f88-79b7abf1e991",
                "cf4bbb3d-72f8-4c84-bd42-1c6d23554db6",
                "bc123c4c-e9ea-40df-889f-db7d0a860f56"
              ],
              "pending": [],
              "skipped": [],
              "duration": 13047,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7d97b1a-afe8-47cf-a065-f5d6e89e14a0",
              "title": "Editing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should hide other controls when editing",
                  "fullTitle": "TodoMVC - React Editing should hide other controls when editing",
                  "timedOut": null,
                  "duration": 4162,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.toggle').should('not.be.visible');\ncy.get('@secondTodo').find('label').should('not.be.visible');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Editing`",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Editing`\n    at Context.eval (webpack://automation-practice/./cypress/support/commands.js:39:4)",
                    "diff": null
                  },
                  "uuid": "11bf6a28-748a-4cad-904f-91bf2df011cf",
                  "parentUUID": "e7d97b1a-afe8-47cf-a065-f5d6e89e14a0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should save edits on blur",
                  "fullTitle": "TodoMVC - React Editing should save edits on blur",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('buy some sausages')\n// we can just send the blur event directly\n// to the input instead of having to click\n// on another button on the page. though you\n// could do that its just more mental work\n.blur();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "65da5c39-535c-4b1a-8f4a-b04115aef2e5",
                  "parentUUID": "e7d97b1a-afe8-47cf-a065-f5d6e89e14a0",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should trim entered text",
                  "fullTitle": "TodoMVC - React Editing should trim entered text",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('    buy some sausages    ').type('{enter}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@secondTodo').should('contain', 'buy some sausages');\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "4a3da620-2bb7-4564-ad56-79a04961ca52",
                  "parentUUID": "e7d97b1a-afe8-47cf-a065-f5d6e89e14a0",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should remove the item if an empty text string was entered",
                  "fullTitle": "TodoMVC - React Editing should remove the item if an empty text string was entered",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('{enter}');\ncy.get('@todos').should('have.length', 2);",
                  "err": {},
                  "uuid": "ae81e662-e24a-4232-93b6-756f52f63347",
                  "parentUUID": "e7d97b1a-afe8-47cf-a065-f5d6e89e14a0",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should cancel edits on escape",
                  "fullTitle": "TodoMVC - React Editing should cancel edits on escape",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).as('secondTodo').find('label').dblclick();\ncy.get('@secondTodo').find('.edit').clear().type('foo{esc}');\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_TWO);\ncy.get('@todos').eq(2).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "f2bad6a1-a3a0-4985-b8ef-66e3a23542a1",
                  "parentUUID": "e7d97b1a-afe8-47cf-a065-f5d6e89e14a0",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "11bf6a28-748a-4cad-904f-91bf2df011cf"
              ],
              "pending": [],
              "skipped": [
                "65da5c39-535c-4b1a-8f4a-b04115aef2e5",
                "4a3da620-2bb7-4564-ad56-79a04961ca52",
                "ae81e662-e24a-4232-93b6-756f52f63347",
                "f2bad6a1-a3a0-4985-b8ef-66e3a23542a1"
              ],
              "duration": 4162,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2ef18cc-7339-450a-9f69-cf37ec1df5e1",
              "title": "Counter",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the current number of todo items",
                  "fullTitle": "TodoMVC - React Counter should display the current number of todo items",
                  "timedOut": null,
                  "duration": 4347,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.createTodo(TODO_ITEM_ONE);\ncy.get('.todo-count').contains('1 item left');\ncy.createTodo(TODO_ITEM_TWO);\ncy.get('.todo-count').contains('2 items left');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (webpack://automation-practice/./cypress/support/commands.js:67:4)",
                    "diff": null
                  },
                  "uuid": "31b6ed60-5be9-473f-9a9e-1415f2898237",
                  "parentUUID": "a2ef18cc-7339-450a-9f69-cf37ec1df5e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "31b6ed60-5be9-473f-9a9e-1415f2898237"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4347,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3ccad9fc-3b0b-4fca-867b-f445793f91dc",
              "title": "Clear completed button",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should display the correct text",
                  "fullTitle": "TodoMVC - React Clear completed button should display the correct text",
                  "timedOut": null,
                  "duration": 4206,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(0).find('.toggle').check();\ncy.get('.clear-completed').contains('Clear completed');",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Clear completed button`",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Clear completed button`\n    at Context.eval (webpack://automation-practice/./cypress/support/commands.js:39:4)",
                    "diff": null
                  },
                  "uuid": "2344802a-1f6a-46d5-82aa-791fdf3e5449",
                  "parentUUID": "3ccad9fc-3b0b-4fca-867b-f445793f91dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove completed items when clicked",
                  "fullTitle": "TodoMVC - React Clear completed button should remove completed items when clicked",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').click();\ncy.get('@todos').should('have.length', 2);\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {},
                  "uuid": "29d36c68-c32f-481d-8bdf-ba939c0c9fb9",
                  "parentUUID": "3ccad9fc-3b0b-4fca-867b-f445793f91dc",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should be hidden when there are no items that are completed",
                  "fullTitle": "TodoMVC - React Clear completed button should be hidden when there are no items that are completed",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.clear-completed').should('be.visible').click();\ncy.get('.clear-completed').should('not.exist');",
                  "err": {},
                  "uuid": "20dba4ad-68bf-485c-bccd-4a0f9a0ed265",
                  "parentUUID": "3ccad9fc-3b0b-4fca-867b-f445793f91dc",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2344802a-1f6a-46d5-82aa-791fdf3e5449"
              ],
              "pending": [],
              "skipped": [
                "29d36c68-c32f-481d-8bdf-ba939c0c9fb9",
                "20dba4ad-68bf-485c-bccd-4a0f9a0ed265"
              ],
              "duration": 4206,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fdc18751-593b-42b0-acac-6199776e2bec",
              "title": "Persistence",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should persist its data",
                  "fullTitle": "TodoMVC - React Persistence should persist its data",
                  "timedOut": null,
                  "duration": 4342,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// mimicking TodoMVC tests\n// by writing out this function\nfunction testState() {\n  cy.get('@firstTodo').should('contain', TODO_ITEM_ONE).and('have.class', 'completed');\n  cy.get('@secondTodo').should('contain', TODO_ITEM_TWO).and('not.have.class', 'completed');\n}\ncy.createTodo(TODO_ITEM_ONE).as('firstTodo');\ncy.createTodo(TODO_ITEM_TWO).as('secondTodo');\ncy.get('@firstTodo').find('.toggle').check().then(testState).reload().then(testState);",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n    at Context.eval (webpack://automation-practice/./cypress/support/commands.js:67:4)",
                    "diff": null
                  },
                  "uuid": "cd982584-fbce-443c-92b7-f9adb058a7a9",
                  "parentUUID": "fdc18751-593b-42b0-acac-6199776e2bec",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "cd982584-fbce-443c-92b7-f9adb058a7a9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 4342,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2d16d8b3-1eab-4268-965e-e8e848b7358a",
              "title": "Routing",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow me to display active items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display active items",
                  "timedOut": null,
                  "duration": 4159,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('@todos').eq(0).should('contain', TODO_ITEM_ONE);\ncy.get('@todos').eq(1).should('contain', TODO_ITEM_THREE);",
                  "err": {
                    "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Routing`",
                    "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `.new-todo`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Routing`\n    at Context.eval (webpack://automation-practice/./cypress/support/commands.js:39:4)",
                    "diff": null
                  },
                  "uuid": "c79d40d1-8ea0-4eeb-a0c6-a546f26e7432",
                  "parentUUID": "2d16d8b3-1eab-4268-965e-e8e848b7358a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respect the back button",
                  "fullTitle": "TodoMVC - React Routing should respect the back button",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);\ncy.go('back');\ncy.get('@todos').should('have.length', 2);\ncy.go('back');\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "9a1bdb79-5a32-470c-82bf-8c402449a20f",
                  "parentUUID": "2d16d8b3-1eab-4268-965e-e8e848b7358a",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to display completed items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display completed items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Completed').click();\ncy.get('@todos').should('have.length', 1);",
                  "err": {},
                  "uuid": "24ff4ed7-612a-478b-abcb-babb6730c9fe",
                  "parentUUID": "2d16d8b3-1eab-4268-965e-e8e848b7358a",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should allow me to display all items",
                  "fullTitle": "TodoMVC - React Routing should allow me to display all items",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('@todos').eq(1).find('.toggle').check();\ncy.get('.filters').contains('Active').click();\ncy.get('.filters').contains('Completed').click();\ncy.get('.filters').contains('All').click();\ncy.get('@todos').should('have.length', 3);",
                  "err": {},
                  "uuid": "fe5c0127-7fe5-408d-b2cd-0137580bf1ee",
                  "parentUUID": "2d16d8b3-1eab-4268-965e-e8e848b7358a",
                  "isHook": false,
                  "skipped": true
                },
                {
                  "title": "should highlight the currently applied filter",
                  "fullTitle": "TodoMVC - React Routing should highlight the currently applied filter",
                  "timedOut": null,
                  "duration": 0,
                  "state": "skipped",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// using a within here which will automatically scope\n// nested 'cy' queries to our parent element <ul.filters>\ncy.get('.filters').within(function () {\n  cy.contains('All').should('have.class', 'selected');\n  cy.contains('Active').click().should('have.class', 'selected');\n  cy.contains('Completed').click().should('have.class', 'selected');\n});",
                  "err": {},
                  "uuid": "bc8f5d53-35ad-4942-9786-1565918d1ab7",
                  "parentUUID": "2d16d8b3-1eab-4268-965e-e8e848b7358a",
                  "isHook": false,
                  "skipped": true
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "c79d40d1-8ea0-4eeb-a0c6-a546f26e7432"
              ],
              "pending": [],
              "skipped": [
                "9a1bdb79-5a32-470c-82bf-8c402449a20f",
                "24ff4ed7-612a-478b-abcb-babb6730c9fe",
                "fe5c0127-7fe5-408d-b2cd-0137580bf1ee",
                "bc8f5d53-35ad-4942-9786-1565918d1ab7"
              ],
              "duration": 4159,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}